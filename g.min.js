!function () { if ("undefined" != typeof window) return this; if ("undefined" == typeof window && "undefined" == typeof document) throw new Error("We requires a window with a document!") }(), window.Width = window.innerWidth, window.Height = window.innerHeight, window.onresize = (() => { window.Width = window.innerWidth, window.Height = window.innerHeight }), document.GetElement = ((e, t) => g.Selector(e, t)); var _EEjijeT, CTX, g = { Highlight: function (e, t, n) { if ("" != n && null != n || (n = 4e3), "" != t && null != t || (t = !0), "string" == typeof e) { if (e.indexOf(".") > -1) { for (var i = e.substring(e.indexOf(".") + 1), o = (document.getElementsByClassName(i), 0); o < document.body.getElementsByClassName(i).length; o++)document.getElementsByClassName(i)[o].classList.add("gx-highlight"); "boolean" == typeof t && 1 == t && setTimeout(function () { for (var e = 0; e < document.body.getElementsByClassName(i).length; e++)document.getElementsByClassName(i)[e].classList.remove("gx-highlight") }, n) } if (e.indexOf("#") > -1) { i = e.substring(e.indexOf("#") + 1); document.getElementById(i).classList.add("gx-highlight"), "boolean" == typeof t && 1 == t && setTimeout(function () { document.getElementById(i).classList.remove("gx-highlight") }, n) } if (e.indexOf("<") > -1 && e.indexOf(">") > -1) { for (i = e.substring(e.indexOf("<") + 1, e.indexOf(">")), o = 0; o < document.body.getElementsByTagName(i).length; o++)document.getElementsByTagName(i)[o].classList.add("gx-highlight"); "boolean" == typeof t && 1 == t && setTimeout(function () { for (var e = 0; e < document.body.getElementsByTagName(i).length; e++)document.getElementsByTagName(i)[e].classList.remove("gx-highlight"), null != document.getElementsByTagName(i)[e].getAttribute("class") && "" != document.getElementsByTagName(i)[e].getAttribute("class") || document.getElementsByTagName(i)[e].removeAttribute("class") }, n) } } "object" == typeof e && (e.classList.add("gx-highlight"), "boolean" == typeof t && 1 == t && setTimeout(function () { e.classList.remove("gx-highlight") }, n)) }, All: function (e) { if (void 0 === e && void 0 === e) throw "Uncaught TypeError: Failed to execute 'All' on 'Document': 1 argument required, but only 0 present"; { var t, n, i; if (n = new Array, "." == e.substring(0, 1)) { t = e.substring(e.indexOf(".") + 1); for (var o = 0; o < document.getElementsByClassName(t).length; o++)n.push(document.getElementsByClassName(t)[o]); return s(n) } if ("#" == e.substring(0, 1)) { t = e.substring(e.indexOf("#") + 1); for (o = 0; o < document.body.getElementsByTagName("*").length; o++)(i = document.body.getElementsByTagName("*")[o]).getAttribute("id") == t && n.push(i); return s(n) } if ("<" == e.substring(0, 1) && e.indexOf(">") > -1) { t = e.substring(e.indexOf("<") + 1, e.indexOf(">")); for (o = 0; o < document.getElementsByTagName(t).length; o++)n.push(document.getElementsByTagName(t)[o]); return s(n) } function s(e) { if (0 !== e.length) return e.Random = (() => e[Math.floor(Math.random() * e.length)]), e.Css = ((t, n) => { if (void 0 !== t && void 0 !== n) for (var i = 0; i < e.length; i++)e[i].style.setProperty(t, n) }), e } } }, Selector(e, t) { var n, i, o; if ("string" == typeof e) { if (void 0 === e && "" === e) return "Can not find a undefined element"; if (null != t && "" != t || (t = 0), e.indexOf(".") > -1) return n = e.substring(e.indexOf(".") + 1), i = document.getElementsByClassName(n)[t], s(o = i); if (e.indexOf("#") > -1) return n = e.substring(e.indexOf("#") + 1), i = document.getElementById(n), s(o = i); if (e.indexOf("<") > -1 && e.indexOf(">") > -1) return n = e.substring(e.indexOf("<") + 1, e.indexOf(">")), i = document.getElementsByTagName(n)[t], s(o = i); if (e.indexOf("@") > -1) return n = e.substring(e.indexOf("@") + 1), i = document.getElementsByName(n)[t], s(o = i) } else if ("object" == typeof e) return e; function s(e) { return void 0 !== o && (e.On = function (e, t) { void 0 !== o && void 0 !== e && ("string" == typeof e && o.addEventListener(e, t), "object" == typeof e && o.addEventListener(e, t)) }, e.Css = function (e, t) { void 0 !== o && void 0 !== e && void 0 !== t && o.style.setProperty(e, t) }, e.Width = function (e) { if (void 0 !== e) o.style.width = e; else if (null == e) return o.clientWidth }, e.Height = function (e) { if (void 0 !== e) o.style.height = e; else if (null == e) return o.clientHeight }, e.Class = (e => { if (void 0 !== e) o.className = e; else if (null == e) return o.className })), e } } }, Toast = function (e, t, n, i) { this.text = e, this.duration = 1e3 * t, this.textColor = n, this.backgroundColor = i, this.Run = function (e) { var t = document.createElement("div"); t.className = "Toast-Container"; var n = document.createElement("span"); n.className = "Toast-Text", n.innerHTML = this.text, n.style.color = this.textColor, n.style.background = this.backgroundColor, n.style.animation = "Toast-Popup 1s ease", setTimeout(function () { n.style.opacity = "0", setTimeout(function () { t.remove(), n.remove() }, 300) }, this.duration), t.appendChild(n), document.body.appendChild(t) } }; !function () { for (var e = 0; e < document.getElementsByTagName("interact").length; e++) { var t = document.getElementsByTagName("interact")[e], n = { b1: t.getAttribute("animate"), b2: t.getAttribute("mousefollow"), b3: t.getAttribute("event"), b4: t.getAttribute("action") }; null !== n && null !== n.b3 && ("click" == n.b3 && (t.onclick = new Function(n.b4)), "hover" == n.b3 && (t.onmouseover = new Function(n.b4), t.onmouseout = function () { return !1 })) } }(); var Canvas = { Create: function (e, t) { null != e && null != t || (e = 200, t = 200); var n = document.createElement("canvas"); return n.width = e, n.height = t, n.className = "g-canvas", _EEjijeT = n, document.body.appendChild(n), CTX = n.getContext("2d"), n }, Clear: function () { CTX.clearRect(0, 0, window.innerWidth, window.innerHeight) }, BeginPath: function () { CTX.beginPath() }, FillStyle: function (e) { "string" == typeof e && (CTX.fillStyle = e), "object" == typeof e && (CTX.fillStyle = e) }, Background: function (e) { "string" == typeof e && (CTX.fillStyle = e, CTX.fillRect(0, 0, window.innerWidth, window.innerHeight)) }, StrokeStyle: function (e) { "string" == typeof e && (CTX.strokeStyle = e), "object" == typeof e && (CTX.strokeStyle = e) }, LineWidth: function (e) { CTX.lineWidth = e }, Rect: function (e, t, n, i) { CTX.beginPath(), CTX.rect(e, t, n, i) }, Fill: function () { CTX.fill() }, Stroke: function () { CTX.stroke() } }, Colors = { RED: "#ff0000", ORANGE: "#ff6600", YELLOW: "#ffff00", GREEN: "#008000", BLUE: "#0000ff", INDIGO: "#4b0082", VIOLET: "#7f00ff", BLACK: "#000000", WHITE: "#ffffff" };